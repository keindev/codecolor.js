<pre><code class="cc-container"><span class="cc-keyword">function</span> <span class="cc-entity">test</span>() {
    [<span class="cc-string">'test'</span>, <span class="cc-string">'keywords'</span>].<span class="cc-entity">forEach</span>((name, index)<span class="cc-symbol"> =></span> {
        <span class="cc-keyword">const</span> regExp <span class="cc-operator">=</span> <span class="cc-keyword">new</span> <span class="cc-constant">RegExp</span>(<span class="cc-string">/test/</span>, <span class="cc-string">'gm'</span>);
        <span class="cc-keyword">var</span> match;

        <span class="cc-keyword">while</span> (match <span class="cc-operator">=</span> regExp.<span class="cc-entity">exec</span>(name)) {
            <span class="cc-keyword">let</span> token <span class="cc-operator">=</span> <span class="cc-keyword">new</span> <span class="cc-constant">Token</span>(match[<span class="cc-constant">0</span>], match.<span class="cc-variable">index</span>);

            <span class="cc-keyword">if</span> (<span class="cc-entity">getTokenIndex</span>(token) <span class="cc-operator">>=</span> <span class="cc-constant">0</span>) {
                tokens.<span class="cc-entity">splice</span>(token.<span class="cc-variable">index</span>, <span class="cc-constant">0</span>, token);
            } <span class="cc-keyword">else</span> {
                tokens[<span class="cc-meta">Math</span>.<span class="cc-entity">abs</span>(token.<span class="cc-variable">index</span>)] <span class="cc-operator">=</span> token;
            }
        }
    });

    <span class="cc-keyword">return</span> <span class="cc-constant">true</span>;
}</code></pre>
